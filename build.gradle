// Top-level build file where you can add configuration options common to all sub-projects/modules.

import com.gnoemes.shimori.Libs

buildscript {
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath Libs.androidGradlePlugin

        classpath Libs.Kotlin.gradlePlugin
        classpath Libs.Kotlin.extensions

        classpath Libs.advancedVersioning

        classpath Libs.AndroidX.Navigation.safeArgs
    }
}

plugins {
    id 'com.github.ben-manes.versions' version "0.25.0"
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {

            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.FlowPreview"

            jvmTarget = "1.8"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


Object propOrDef(String propertyName, Object defaultValue) {
    def propertyValue = project.properties[propertyName]

    if (propertyValue == null) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        propertyValue = properties.getProperty(propertyName)
    }

    return propertyValue != null ? propertyValue : defaultValue
}

Properties readVersion(File versionFile) {
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
        println(ignore)
    } finally {
        if (stream != null) stream.close()
    }
    // safety defaults in case file is missing
    if (!version['major']) version['major'] = "1"
    if (!version['minor']) version['minor'] = "0"
    if (!version['patch']) version['patch'] = "0"
    if (!version['build']) version['build'] = "0"
    return version
}
