// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.buildConfig = [
            'compileSdk': 30,
            'minSdk'    : 21,
            'targetSdk' : 30,
    ]

    repositories {
        google()
        mavenCentral()

        // Used for Accompanist snapshots
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath libs.android.gradlePlugin
        classpath libs.kotlin.gradlePlugin

        classpath libs.kotlin.extensions

        classpath libs.google.gmsGoogleServices
        classpath libs.google.crashlyticsGradle

        classpath libs.hilt.gradlePlugin
    }
}

plugins {
    id 'com.github.ben-manes.versions' version "0.39.0"
}



allprojects {
    repositories {
        google()
        mavenCentral()

        // Jetpack Compose SNAPSHOTs
        def composeSnapshot = libs.versions.composesnapshot.get()
        if (composeSnapshot.length() > 1) {
            maven { url "https://androidx.dev/snapshots/builds/$composeSnapshot/artifacts/repository/" }
        }

        // Used for Accompanist snapshots
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
}

subprojects {
    configurations.configureEach {
        // We forcefully exclude AppCompat + MDC from any transitive dependencies.
        // This is a Compose app, so there's no need for these.
        exclude group: 'androidx.appcompat'
        exclude group: 'com.google.android.material', module: 'material'

        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.jetbrains.kotlinx'
                    && details.requested.module.name == 'kotlinx-collections-immutable-jvm') {
                // kotlinx-collections-immutable-jvm 0.3.4+ is available on Maven Central
                details.useVersion '0.3.4'
            }
        }
    }


    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-Xopt-in=kotlin.Experimental"

            // Set JVM target to 1.8
            jvmTarget = "1.8"
        }
    }
}

Object propOrDef(String propertyName, Object defaultValue) {
    def propertyValue = project.properties[propertyName]

    if (propertyValue == null) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        propertyValue = properties.getProperty(propertyName)
    }

    return propertyValue != null ? propertyValue : defaultValue
}

Properties readVersion(File versionFile) {
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
        println(ignore)
    } finally {
        if (stream != null) stream.close()
    }
    // safety defaults in case file is missing
    if (!version['major']) version['major'] = "1"
    if (!version['minor']) version['minor'] = "0"
    if (!version['patch']) version['patch'] = "0"
    if (!version['build']) version['build'] = "0"
    return version
}
