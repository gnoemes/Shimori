insert:
INSERT OR REPLACE INTO anime(name, name_ru, name_eng, image_original, image_preview,
image_x96, image_x48, url, anime_type, rating, status, episodes, episodes_aired,
date_aired, date_released, age_rating,  description, description_html, franchise, favorite,
topic_id, duration, next_episode, next_episode_date)
VALUES (?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

update:
UPDATE anime
SET
 id = :id,
 name = :name,
 name_ru = coalesce(:name_ru, name_ru),
 name_eng = coalesce(:name_eng, name_eng),
 image_original = coalesce(:image_original, image_original),
 image_preview = coalesce(:image_preview, image_preview),
 image_x96 = :image_x96,
 image_x48 = :image_x48,
 url = coalesce(:url, url),
 anime_type = coalesce(:anime_type, anime_type),
 rating = coalesce(:rating, rating),
 status = coalesce(:status , status),
 episodes = :episodes,
 episodes_aired = :episodes_aired,
 date_aired = coalesce(:date_aired, date_aired),
 date_released = coalesce(:date_released, date_released),
 age_rating = CASE WHEN :age_rating = "NONE" THEN age_rating ELSE :age_rating END,
 description = coalesce(:description, description),
 description_html = coalesce(:description_html, description_html),
 franchise = coalesce(:franchise, franchise),
 favorite = :favorite,
 topic_id  = coalesce(:topic_id, topic_id),
 duration = coalesce(:duration, duration),
 next_episode = coalesce(:next_episode, next_episode)
 WHERE id = :id;

deleteAll:
DELETE FROM anime;

deleteById:
DELETE FROM anime WHERE id = :id;

-- https://github.com/sqldelight/sqldelight/issues/5489

countWithStatus:
SELECT COUNT(*) FROM anime
INNER JOIN track ON track.target_id = anime.id AND track.target_type = "ANIME"
WHERE track.status = :status;

queryAll:
SELECT * FROM anime;

queryById:
SELECT * FROM anime WHERE id = :id;

queryByIdWithTrack:
SELECT * FROM anime
LEFT OUTER JOIN track ON track.target_id = anime.id AND track.target_type = "ANIME"
LEFT OUTER JOIN pinned ON pinned.target_id = anime.id AND pinned.target_type = track.target_type
WHERE anime.id = :id;

queryByStatus:
SELECT * FROM anime
INNER JOIN track ON track.target_id = anime.id AND track.target_type = "ANIME"
LEFT OUTER JOIN pinned ON pinned.target_id = anime.id AND pinned.target_type = track.target_type
WHERE track.status = :status;

selectLastInsertedRowId:
SELECT last_insert_rowid();