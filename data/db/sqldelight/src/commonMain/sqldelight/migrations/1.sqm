import com.gnoemes.shimori.data.app.Request;
import com.gnoemes.shimori.data.app.SyncAction;
import com.gnoemes.shimori.data.common.AgeRating;
import com.gnoemes.shimori.data.common.GenreType;
import com.gnoemes.shimori.data.common.TitleStatus;
import com.gnoemes.shimori.data.track.ListSortOption;
import com.gnoemes.shimori.data.track.TrackStatus;
import com.gnoemes.shimori.data.track.TrackTargetType;
import kotlin.Boolean;
import kotlin.Int;
import kotlin.Long;
import kotlinx.datetime.Instant;
import kotlinx.datetime.LocalDate;

CREATE TABLE anime(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    name_ru TEXT,
    name_eng TEXT,
    image_original TEXT,
    image_preview TEXT,
    image_x96 TEXT,
    image_x48 TEXT,
    url TEXT,
    anime_type TEXT,
    rating REAL,
    status TEXT AS TitleStatus,
    episodes INTEGER AS Int NOT NULL,
    episodes_aired INTEGER AS Int NOT NULL,
    date_aired TEXT AS LocalDate,
    date_released TEXT AS LocalDate,
    age_rating TEXT AS AgeRating NOT NULL,
    description TEXT,
    description_html TEXT,
    franchise TEXT,
    favorite INTEGER AS Boolean NOT NULL,
    topic_id INTEGER,
    duration INTEGER AS Int,
    next_episode INTEGER AS Int,
    next_episode_date INTEGER AS Instant
);

CREATE INDEX anime_next_episode_date ON anime(next_episode_date);

CREATE TABLE anime_screenshot (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    title_id INTEGER NOT NULL,
    original TEXT NOT NULL,
    preview TEXT NOT NULL
);

CREATE INDEX screenshottitle_index ON anime_screenshot(title_id);

CREATE TABLE anime_video (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    title_id INTEGER NOT NULL,
    name TEXT,
    url TEXT NOT NULL,
    image_url TEXT,
    type INTEGER AS Int,
    hosting TEXT
);

CREATE INDEX title_index ON anime_video(title_id);

CREATE TABLE character (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    name_ru TEXT,
    name_eng TEXT,
    image_original TEXT,
    image_preview TEXT,
    image_x96 TEXT,
    image_x48 TEXT,
    url TEXT,
    description TEXT,
    description_source_url TEXT
);

CREATE TABLE character_role(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    character_id INTEGER NOT NULL,
    target_id INTEGER NOT NULL,
    target_type TEXT AS TrackTargetType NOT NULL,
    role TEXT,
    role_ru TEXT
 );

CREATE INDEX role_index ON character_role(character_id, target_id, target_type);


CREATE TABLE genre(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    source_id INTEGER NOT NULL,
    type TEXT AS GenreType NOT NULL,
    name TEXT NOT NULL,
    name_ru TEXT,
    description TEXT
);

CREATE INDEX genre_source_id ON genre(source_id);

CREATE TABLE genre_relation(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    target_id INTEGER NOT NULL,
    target_type TEXT AS TrackTargetType NOT NULL,
    source_id INTEGER NOT NULL,
    genre_ids TEXT NOT NULL
);

CREATE INDEX genre_relation_source_id ON genre_relation(source_id);
CREATE UNIQUE INDEX genre_relation_target ON genre_relation(target_id, target_type, source_id);

CREATE TABLE last_request (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    request TEXT AS Request NOT NULL,
    entity_id INTEGER NOT NULL,
    timestamp INTEGER AS Instant NOT NULL
);

CREATE UNIQUE INDEX last_request_request_id ON last_request(request, entity_id);

CREATE TABLE pinned (
     id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
     target_id INTEGER NOT NULL,
     target_type TEXT AS TrackTargetType NOT NULL
);

CREATE TABLE list_sort (
      id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      type TEXT AS TrackTargetType NOT NULL,
      sort TEXT AS ListSortOption NOT NULL,
      descending INTEGER AS Boolean NOT NULL
);

CREATE UNIQUE INDEX list_sort_type ON list_sort(type);

CREATE TABLE manga (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    name_ru TEXT,
    name_eng TEXT,
    image_original TEXT,
    image_preview TEXT,
    image_x96 TEXT,
    image_x48 TEXT,
    url TEXT,
    manga_type TEXT,
    rating REAL,
    status TEXT AS TitleStatus,
    chapters INTEGER AS Int NOT NULL,
    volumes INTEGER AS Int NOT NULL,
    date_aired TEXT AS LocalDate,
    date_released TEXT AS LocalDate,
    age_rating TEXT AS AgeRating NOT NULL,
    description TEXT,
    description_html TEXT,
    franchise TEXT,
    favorite INTEGER AS Boolean NOT NULL,
    topic_id INTEGER
);

CREATE TABLE ranobe (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    name_ru TEXT,
    name_eng TEXT,
    image_original TEXT,
    image_preview TEXT,
    image_x96 TEXT,
    image_x48 TEXT,
    url TEXT,
    ranobe_type TEXT,
    rating REAL,
    status TEXT AS TitleStatus,
    chapters INTEGER AS Int NOT NULL,
    volumes INTEGER AS Int NOT NULL,
    date_aired TEXT AS LocalDate,
    date_released TEXT AS LocalDate,
    age_rating TEXT AS AgeRating NOT NULL,
    description TEXT,
    description_html TEXT,
    franchise TEXT,
    favorite INTEGER AS Boolean NOT NULL,
    topic_id INTEGER
);

CREATE TABLE source_ids_sync (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    source_id INTEGER NOT NULL,
    local_id INTEGER NOT NULL,
    remote_id INTEGER NOT NULL,
    type INTEGER AS Int NOT NULL
);

CREATE INDEX source_ids_sync_local_index ON source_ids_sync(source_id, local_id, type);
CREATE INDEX source_ids_sync_remote_index ON source_ids_sync(source_id, remote_id, type);

CREATE TABLE track (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    target_id INTEGER NOT NULL,
    target_type TEXT AS TrackTargetType NOT NULL,
    status TEXT AS TrackStatus  NOT NULL,
    score INTEGER AS Int,
    comment TEXT,
    progress INTEGER AS Int NOT NULL,
    re_counter INTEGER AS Int NOT NULL,
    date_created INTEGER AS Instant,
    date_updated INTEGER AS Instant
);

CREATE UNIQUE INDEX track_target ON track(target_id, target_type);

CREATE TABLE track_to_sync (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    track_id INTEGER NOT NULL,
    sync_action TEXT AS SyncAction NOT NULL,
    attempts INTEGER AS Int NOT NULL,
    last_attempt INTEGER AS Instant,
    attempt_source_id INTEGER
);

CREATE UNIQUE INDEX sync_track_id ON track_to_sync(track_id);

CREATE TABLE user (
     id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
     remote_id INTEGER NOT NULL,
     source_id INTEGER NOT NULL,
     nickname TEXT NOT NULL,
     image_original TEXT,
     image_preview TEXT,
     image_x96 TEXT,
     image_x48 TEXT,
     name TEXT,
     about TEXT,
     common_info TEXT,
     sex TEXT,
     website TEXT,
     date_birth TEXT,
     locale TEXT,
     full_years INTEGER AS Int,
     location TEXT,
     show_comments INTEGER AS Boolean NOT NULL,
     friend INTEGER AS Boolean NOT NULL,
     ignored INTEGER AS Boolean NOT NULL,
     banned INTEGER AS Boolean NOT NULL,
     is_me INTEGER AS Boolean NOT NULL,
     last_online INTEGER AS Instant
);

CREATE UNIQUE INDEX user_source_id ON user(source_id);
CREATE INDEX user_is_me ON user(is_me);

CREATE VIEW animeListView AS
SELECT
    title.id,
    title.name,
    title.name_ru AS nameRu,
    title.name_eng AS nameEn,
    title.image_original,
    title.image_preview,
    title.image_x96,
    title.image_x48,
    title.anime_type,
    title.rating,
    title.status,
    title.episodes,
    title.episodes_aired,
    title.date_aired,
    title.date_released,
    title.duration,
    title.next_episode,
    title.next_episode_date,
    track.id AS trackId,
    track.status AS trackStatus,
    track.score,
    track.comment,
    track.progress,
    track.re_counter,
    track.date_created,
    track.date_updated,
    p.id AS pinId
FROM anime AS title
INNER JOIN track AS track ON track.target_id = title.id AND track.target_type = "ANIME"
LEFT OUTER JOIN pinned AS p ON p.target_id = title.id AND p.target_type = track.target_type;

CREATE VIEW mangaAndRanobeListView AS
SELECT * FROM (
SELECT
     title.id,
     title.name,
     title.name_ru AS nameRu,
     title.name_eng AS nameEn,
     title.image_original,
     title.image_preview,
     title.image_x96,
     title.image_x48,
     title.manga_type,
     title.rating,
     title.status,
     title.volumes,
     title.chapters,
     title.date_aired,
     title.date_released,
     track.id AS trackId,
     track.status AS trackStatus,
     track.score,
     track.comment,
     track.progress,
     track.re_counter,
     track.date_created,
     track.date_updated,
     p.id AS pinId
 FROM manga AS title
INNER JOIN track AS track ON track.target_id = title.id AND track.target_type = "MANGA"
LEFT OUTER JOIN pinned AS p ON p.target_id = title.id AND p.target_type = track.target_type

UNION ALL

SELECT
     title.id,
     title.name,
     title.name_ru AS nameRu,
     title.name_eng AS nameEn,
     title.image_original,
     title.image_preview,
     title.image_x96,
     title.image_x48,
     title.ranobe_type,
     title.rating,
     title.status,
     title.volumes,
     title.chapters,
     title.date_aired,
     title.date_released,
     track.id AS trackId,
     track.status AS trackStatus,
     track.score,
     track.comment,
     track.progress,
     track.re_counter,
     track.date_created,
     track.date_updated,
     p.id AS pinId
 FROM ranobe AS title
INNER JOIN track AS track ON track.target_id = title.id AND track.target_type = "RANOBE"
LEFT OUTER JOIN pinned AS p ON p.target_id = title.id AND p.target_type = track.target_type
);

CREATE VIEW mangaListView AS
SELECT
    title.id,
    title.name,
    title.name_ru AS nameRu,
    title.name_eng AS nameEn,
    title.image_original,
    title.image_preview,
    title.image_x96,
    title.image_x48,
    title.manga_type,
    title.rating,
    title.status,
    title.volumes,
    title.chapters,
    title.date_aired,
    title.date_released,
    track.id AS trackId,
    track.status AS trackStatus,
    track.score,
    track.comment,
    track.progress,
    track.re_counter,
    track.date_created,
    track.date_updated,
    p.id AS pinId
FROM manga AS title
INNER JOIN track AS track ON track.target_id = title.id AND track.target_type = "MANGA"
LEFT OUTER JOIN pinned AS p ON p.target_id = title.id AND p.target_type = track.target_type;


CREATE VIEW pinnedListView AS
SELECT * FROM (
SELECT anime.*, track.*, pinned.* FROM pinned
INNER JOIN anime ON pinned.target_type = "ANIME" AND anime.id = pinned.target_id
INNER JOIN track ON track.target_id = anime.id AND track.target_type = pinned.target_type

UNION ALL

SELECT manga.*, NULL, NULL, NULL, track.*, pinned.* FROM pinned
INNER JOIN manga ON pinned.target_type = "MANGA" AND manga.id = pinned.target_id
INNER JOIN track ON track.target_id = manga.id AND track.target_type = pinned.target_type

UNION ALL

SELECT ranobe.*, NULL, NULL, NULL, track.*, pinned.* FROM pinned
INNER JOIN ranobe ON pinned.target_type = "RANOBE" AND ranobe.id = pinned.target_id
INNER JOIN track ON track.target_id = ranobe.id AND track.target_type = pinned.target_type
);

CREATE VIEW ranobeListView AS
SELECT
    title.id,
    title.name,
    title.name_ru AS nameRu,
    title.name_eng AS nameEn,
    title.image_original,
    title.image_preview,
    title.image_x96,
    title.image_x48,
    title.ranobe_type,
    title.rating,
    title.status,
    title.volumes,
    title.chapters,
    title.date_aired,
    title.date_released,
    track.id AS trackId,
    track.status AS trackStatus,
    track.score,
    track.comment,
    track.progress,
    track.re_counter,
    track.date_created,
    track.date_updated,
    p.id AS pinId
FROM ranobe AS title
INNER JOIN track AS track ON track.target_id = title.id AND track.target_type = "RANOBE"
LEFT OUTER JOIN pinned AS p ON p.target_id = title.id AND p.target_type = track.target_type;

CREATE VIEW titleCharactersView AS
SELECT
    c.id,
    c.name,
    c.name_ru AS nameRu,
    c.name_eng AS nameEn,
    c.image_original,
    c.image_preview,
    c.image_x96,
    c.image_x48,
    cr.id,
    cr.role AS role,
    cr.role_ru AS roleRu,
    cr.target_id,
    cr.target_type
FROM character_role AS cr
INNER JOIN character AS c ON cr.character_id = c.id;

