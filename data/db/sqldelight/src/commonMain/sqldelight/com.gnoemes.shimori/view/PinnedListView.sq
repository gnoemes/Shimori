import com.gnoemes.shimori.data.track.TrackStatus;
import com.gnoemes.shimori.data.track.TrackTargetType;

CREATE VIEW pinnedListView AS
SELECT * FROM (
SELECT
     anime.id,
     anime.name,
     anime.name_ru AS nameRu,
     anime.name_eng AS nameEn,
     anime.image_original,
     anime.image_preview,
     anime.image_x96,
     anime.image_x48,
     anime.anime_type,
     anime.rating,
     anime.status,
     anime.episodes,
     anime.episodes_aired,
     NULL AS volumes,
     NULL AS chapters,
     anime.date_aired,
     anime.date_released,
     anime.duration,
     anime.next_episode,
     anime.next_episode_date,
     track.id AS trackId,
     track.status AS trackStatus,
     track.target_type,
     track.score,
     track.comment,
     track.progress,
     track.re_counter,
     track.date_created,
     track.date_updated,
     pinned.id AS pinId
FROM pinned
INNER JOIN anime ON pinned.target_type = "ANIME" AND anime.id = pinned.target_id
INNER JOIN track ON track.target_id = anime.id AND track.target_type = pinned.target_type

UNION ALL

SELECT
     manga.id,
     manga.name,
     manga.name_ru AS nameRu,
     manga.name_eng AS nameEn,
     manga.image_original,
     manga.image_preview,
     manga.image_x96,
     manga.image_x48,
     manga.manga_type,
     manga.rating,
     manga.status,
     NULL AS episodes,
     NULL AS episodes_aired,
     manga.volumes,
     manga.chapters,
     manga.date_aired,
     manga.date_released,
     NULL AS duration,
     NULL AS next_episode,
     NULL AS next_episode_date,
     track.id AS trackId,
     track.status AS trackStatus,
     track.target_type,
     track.score,
     track.comment,
     track.progress,
     track.re_counter,
     track.date_created,
     track.date_updated,
     pinned.id AS pinId
FROM pinned
INNER JOIN manga ON pinned.target_type = "MANGA" AND manga.id = pinned.target_id
INNER JOIN track ON track.target_id = manga.id AND track.target_type = pinned.target_type

UNION ALL

SELECT
     ranobe.id,
     ranobe.name,
     ranobe.name_ru AS nameRu,
     ranobe.name_eng AS nameEn,
     ranobe.image_original,
     ranobe.image_preview,
     ranobe.image_x96,
     ranobe.image_x48,
     ranobe.ranobe_type,
     ranobe.rating,
     ranobe.status,
     NULL AS episodes,
     NULL AS episodes_aired,
     ranobe.volumes,
     ranobe.chapters,
     ranobe.date_aired,
     ranobe.date_released,
     NULL AS duration,
     NULL AS next_episode,
     NULL AS next_episode_date,
     track.id AS trackId,
     track.status AS trackStatus,
     track.target_type,
     track.score,
     track.comment,
     track.progress,
     track.re_counter,
     track.date_created,
     track.date_updated,
     pinned.id AS pinId
FROM pinned
INNER JOIN ranobe ON pinned.target_type = "RANOBE" AND ranobe.id = pinned.target_id
INNER JOIN track ON track.target_id = ranobe.id AND track.target_type = pinned.target_type
);


-- https://github.com/cashapp/sqldelight/issues/4492
dummySelectAnime:
SELECT
    title.id,
    title.name,
    title.name_ru AS nameRu,
    title.name_eng AS nameEn,
    title.image_original,
    title.image_preview,
    title.image_x96,
    title.image_x48,
    title.anime_type,
    title.rating,
    title.status,
    title.episodes,
    title.episodes_aired,
    title.date_aired,
    title.date_released,
    title.duration,
    title.next_episode,
    title.next_episode_date
FROM anime AS title;

dummySelectManga:
SELECT
     title.id,
     title.name,
     title.name_ru AS nameRu,
     title.name_eng AS nameEn,
     title.image_original,
     title.image_preview,
     title.image_x96,
     title.image_x48,
     title.manga_type,
     title.rating,
     title.status,
     title.volumes,
     title.chapters,
     title.date_aired,
     title.date_released
 FROM manga AS title;

dummySelectRanobe:
SELECT
     title.id,
     title.name,
     title.name_ru AS nameRu,
     title.name_eng AS nameEn,
     title.image_original,
     title.image_preview,
     title.image_x96,
     title.image_x48,
     title.ranobe_type,
     title.rating,
     title.status,
     title.volumes,
     title.chapters,
     title.date_aired,
     title.date_released
FROM ranobe AS title;


dummySelectTrack:
SELECT
    track.id AS trackId,
    track.status AS trackStatus,
    track.target_type,
    track.score,
    track.comment,
    track.progress,
    track.re_counter,
    track.date_created,
    track.date_updated
FROM track;

querySortName:
SELECT * FROM pinnedListView
ORDER BY
(CASE :descending WHEN 1 THEN name END) DESC,
(CASE :descending WHEN 0 THEN name END) ASC
LIMIT :limit OFFSET :offset;

querySortNameRu:
SELECT * FROM pinnedListView
ORDER BY
(CASE :descending WHEN 1 THEN nameRu END) DESC,
(CASE :descending WHEN 0 THEN nameRu END) ASC
LIMIT :limit OFFSET :offset;

querySortProgress:
SELECT * FROM pinnedListView
ORDER BY
(CASE :descending WHEN 1 THEN progress END) DESC,
(CASE :descending WHEN 0 THEN progress END) ASC,
name ASC
LIMIT :limit OFFSET :offset;

querySortDateCreated:
SELECT * FROM pinnedListView
ORDER BY
(CASE :descending WHEN 1 THEN date_created END) DESC,
(CASE :descending WHEN 0 THEN date_created END) ASC,
name ASC
LIMIT :limit OFFSET :offset;

querySortDateUpdated:
SELECT * FROM pinnedListView
ORDER BY
(CASE :descending WHEN 1 THEN date_updated END) DESC,
(CASE :descending WHEN 0 THEN date_updated END) ASC,
name ASC
LIMIT :limit OFFSET :offset;

querySortDateAired:
SELECT * FROM pinnedListView
ORDER BY
(CASE :descending WHEN 1 THEN datetime(date_aired) END) DESC,
(CASE :descending WHEN 0 THEN datetime(IFNULL(date_aired, '9999-12-31')) END) ASC,
name ASC
LIMIT :limit OFFSET :offset;

querySortScore:
SELECT * FROM pinnedListView
ORDER BY
(CASE :descending WHEN 1 THEN score END) DESC,
(CASE :descending WHEN 0 THEN score END) ASC,
name ASC
LIMIT :limit OFFSET :offset;

querySortRating:
SELECT * FROM pinnedListView
ORDER BY
(CASE :descending WHEN 1 THEN rating END) DESC,
(CASE :descending WHEN 0 THEN rating END) ASC,
name ASC
LIMIT :limit OFFSET :offset;