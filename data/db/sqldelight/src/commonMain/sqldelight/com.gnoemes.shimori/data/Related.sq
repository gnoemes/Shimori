import com.gnoemes.shimori.data.common.RelationType;
import com.gnoemes.shimori.data.track.TrackTargetType;

CREATE TABLE related(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    target_id INTEGER NOT NULL,
    target_type TEXT AS TrackTargetType NOT NULL,
    type TEXT AS RelationType NOT NULL,
    relation TEXT,
    related_id INTEGER NOT NULL,
    related_type TEXT AS TrackTargetType NOT NULL
);

CREATE INDEX related_index ON related(target_id, target_type);


insert:
INSERT OR REPLACE INTO related(target_id, target_type, type, relation, related_id, related_type)
VALUES (?,?,?,?,?,?);

update:
UPDATE related
SET
 id = :id,
 target_id = :targetId,
 target_type = :targetType,
 type = :type,
 relation = :relation,
 related_id = :relatedId,
 related_type = :relatedType
 WHERE id = :id;

deleteAll:
DELETE FROM related;

deleteById:
DELETE FROM related WHERE id = :id;

deleteByTitle:
DELETE FROM related WHERE target_id = :targetId AND target_type = :targetType;

queryAll:
SELECT * FROM related;

queryById:
SELECT * FROM related WHERE id = :id;

queryByTitle:
SELECT * FROM related
WHERE target_id = :targetId AND target_type = :targetType;

queryCount:
SELECT COUNT(*)
FROM (
    SELECT
        anime.id AS id,
        related.target_id AS targetId,
        related.target_type AS targetType
    FROM related
    INNER JOIN anime ON anime.id = related.target_id AND related.target_type = "ANIME"
    LEFT OUTER JOIN track ON track.target_id = anime.id AND track.target_type = "ANIME"

    UNION ALL

    SELECT
        manga.id AS id,
        related.target_id AS targetId,
        related.target_type AS targetType
    FROM related
    INNER JOIN manga ON manga.id = related.target_id AND related.target_type = "MANGA"
    LEFT OUTER JOIN track ON track.target_id = manga.id AND track.target_type = "MANGA"

    UNION ALL

    SELECT
        ranobe.id AS id,
        related.target_id AS targetId,
        related.target_type AS targetType
    FROM related
    INNER JOIN ranobe ON ranobe.id = related.target_id AND related.target_type = "RANOBE"
    LEFT OUTER JOIN track ON track.target_id = ranobe.id AND track.target_type = "RANOBE"
)
WHERE targetId = :targetId AND targetType = :targetType;

queryRelated:
SELECT *
FROM (
    SELECT
         anime.id AS id,
         anime.name AS name,
         anime.name_ru AS nameRu,
         anime.name_eng AS nameEn,
         anime.image_original AS image_original,
         anime.image_preview AS image_preview,
         anime.image_x96 AS image_x96,
         anime.image_x48 AS image_x48,
         anime.anime_type AS type,
         anime.rating AS rating,
         anime.status AS status,
         anime.episodes AS episodes,
         anime.episodes_aired AS episodes_aired,
         NULL AS volumes,
         NULL AS chapters,
         anime.date_aired AS dateAired,
         anime.date_released AS date_released,
         anime.duration AS duration,
         anime.next_episode AS next_episode,
         anime.next_episode_date AS next_episode_date,
         track.id AS trackId,
         track.status AS trackStatus,
         track.target_type AS track_target_type,
         track.score AS score,
         track.comment AS comment,
         track.progress AS progress,
         track.re_counter AS re_counter,
         track.date_created AS date_created,
         track.date_updated AS date_updated,
         related.id AS relatedId,
         related.target_id AS targetId,
         related.target_type AS targetType,
         related.related_type AS relatedType,
         related.type AS relationType,
         related.relation AS relation
    FROM related
    INNER JOIN anime ON anime.id = related.related_id AND related.related_type = "ANIME"
    LEFT OUTER JOIN track ON track.target_id = anime.id AND track.target_type = "ANIME"

    UNION ALL

    SELECT
         manga.id AS id,
         manga.name AS name,
         manga.name_ru AS nameRu,
         manga.name_eng AS nameEn,
         manga.image_original AS image_original,
         manga.image_preview AS image_preview,
         manga.image_x96 AS image_x96,
         manga.image_x48 AS image_x48,
         manga.manga_type AS type,
         manga.rating AS rating,
         manga.status AS status,
         NULL AS episodes,
         NULL AS episodes_aired,
         manga.volumes AS volumes,
         manga.chapters AS chapters,
         manga.date_aired AS dateAired,
         manga.date_released AS date_released,
         NULL AS duration,
         NULL AS next_episode,
         NULL AS next_episode_date,
         track.id AS trackId,
         track.status AS trackStatus,
         track.target_type AS track_target_type,
         track.score AS score,
         track.comment AS comment,
         track.progress AS progress,
         track.re_counter AS re_counter,
         track.date_created AS date_created,
         track.date_updated AS date_updated,
         related.id AS relatedId,
         related.target_id AS targetId,
         related.target_type AS targetType,
         related.related_type AS relatedType,
         related.type AS relationType,
         related.relation AS relation
    FROM related
    INNER JOIN manga ON manga.id = related.related_id AND related.related_type = "MANGA"
    LEFT OUTER JOIN track ON track.target_id = manga.id AND track.target_type = "MANGA"

    UNION ALL

    SELECT
         ranobe.id AS id,
         ranobe.name AS name,
         ranobe.name_ru AS nameRu,
         ranobe.name_eng AS nameEn,
         ranobe.image_original AS image_original,
         ranobe.image_preview AS image_preview,
         ranobe.image_x96 AS image_x96,
         ranobe.image_x48 AS image_x48,
         ranobe.ranobe_type AS type,
         ranobe.rating AS rating,
         ranobe.status AS status,
         NULL AS episodes,
         NULL AS episodes_aired,
         ranobe.volumes AS volumes,
         ranobe.chapters AS chapters,
         ranobe.date_aired AS dateAired,
         ranobe.date_released AS date_released,
         NULL AS duration,
         NULL AS next_episode,
         NULL AS next_episode_date,
         track.id AS trackId,
         track.status AS trackStatus,
         track.target_type AS track_target_type,
         track.score AS score,
         track.comment AS comment,
         track.progress AS progress,
         track.re_counter AS re_counter,
         track.date_created AS date_created,
         track.date_updated AS date_updated,
         related.id AS relatedId,
         related.target_id AS targetId,
         related.target_type AS targetType,
         related.related_type AS relatedType,
         related.type AS relationType,
         related.relation AS relation
    FROM related
    INNER JOIN ranobe ON ranobe.id = related.related_id AND related.related_type = "RANOBE"
    LEFT OUTER JOIN track ON track.target_id = ranobe.id AND track.target_type = "RANOBE"
)
WHERE targetId = :targetId AND targetType = :targetType
ORDER BY datetime(IFNULL(dateAired, '9999-12-31')) ASC
LIMIT :limit OFFSET :offset;


-- https://github.com/cashapp/sqldelight/issues/4492
dummySelectAnime:
SELECT
    title.id,
    title.name,
    title.name_ru AS nameRu,
    title.name_eng AS nameEn,
    title.image_original,
    title.image_preview,
    title.image_x96,
    title.image_x48,
    title.anime_type,
    title.rating,
    title.status,
    title.episodes,
    title.episodes_aired,
    title.date_aired,
    title.date_released,
    title.duration,
    title.next_episode,
    title.next_episode_date
FROM anime AS title;

dummySelectManga:
SELECT
     title.id,
     title.name,
     title.name_ru AS nameRu,
     title.name_eng AS nameEn,
     title.image_original,
     title.image_preview,
     title.image_x96,
     title.image_x48,
     title.manga_type,
     title.rating,
     title.status,
     title.volumes,
     title.chapters,
     title.date_aired,
     title.date_released
 FROM manga AS title;

dummySelectRanobe:
SELECT
     title.id,
     title.name,
     title.name_ru AS nameRu,
     title.name_eng AS nameEn,
     title.image_original,
     title.image_preview,
     title.image_x96,
     title.image_x48,
     title.ranobe_type,
     title.rating,
     title.status,
     title.volumes,
     title.chapters,
     title.date_aired,
     title.date_released
FROM ranobe AS title;


dummySelectTrack:
SELECT
    track.id AS trackId,
    track.status AS trackStatus,
    track.target_type,
    track.score,
    track.comment,
    track.progress,
    track.re_counter,
    track.date_created,
    track.date_updated
FROM track;

selectLastInsertedRowId:
SELECT last_insert_rowid();